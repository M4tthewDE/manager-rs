syntax = "proto3";
package manager;

message Empty {}

message MemoryInfo {
    uint64 total = 1;
    uint64 free = 2;
    uint64 available = 3;
    uint64 used = 4;
}

message DiskInfo {
    repeated Disk disks = 1;
}

message Disk {
    string name = 1;
    string kind = 2;
    string file_system = 3;
    uint64 total_space = 4;
    uint64 available_space = 5;
}


message Cpu {
    string name = 1;
    float cpu_usage = 2;
    uint64 frequency = 3;
}

message CpuInfo {
    repeated Cpu cpus = 1;
}

message Version {
    string version = 1;
    string apiVersion = 2;
}

message Container {
    repeated string names = 1;
    string image = 2;
    string command = 3;
    int64 created = 4;
    repeated Port ports = 5;
    string status = 6;
    string id = 7;
    repeated string logs = 8;
}

message Port {
    int64 privatePort = 1;
    int64 publicPort = 2;
    string port_type = 3;
}

message DockerInfo {
    Version version = 1;
    repeated Container containerList = 2;
}

message InfoReply {
    string name = 1;
    string kernel_version = 2;
    string os_version = 3;
    string host_name = 4;

    MemoryInfo memoryInfo = 5;
    DiskInfo diskInfo = 6;
    CpuInfo cpuInfo = 7;
    DockerInfo dockerInfo = 8;
}

enum LogLevel {
    Trace = 0;
    Debug = 1;
    Info = 2;
    Warn = 3;
    Error = 4;
}

message LogReply {
    LogLevel level = 1; 
    string text = 2;
}

service System {
    rpc GetInfo (Empty) returns (InfoReply);
    rpc Log (Empty) returns (stream LogReply);
}

message ContainerIdentifier {
    string id = 1;
}

service Docker {
    rpc RemoveContainer (ContainerIdentifier) returns (Empty);
    rpc StopContainer (ContainerIdentifier) returns (Empty);
    rpc StartContainer (ContainerIdentifier) returns (Empty);
}

message DiffRequest {
    repeated ComposeFile files = 1;
}

message ComposeFile {
    string path = 1;
    string content = 2;
}

enum DiffResult {
    New = 0;
    Same = 1;
    Modified = 2;
    Removed = 3;
}

message ComposeFileDiff {
    string path = 1;
    DiffResult result = 2;
    string content = 3;
}

message DiffReply {
    repeated ComposeFileDiff diffs = 1; 
}

message PushRequest {
    ComposeFile file = 1;
    DiffResult diffResult = 2;
}

message DeployRequest {
    string path = 1;
}

service Compose {
    rpc Diff(DiffRequest) returns (DiffReply);
    rpc Push(PushRequest) returns (Empty);
    rpc Deploy(DeployRequest) returns (Empty);
}
